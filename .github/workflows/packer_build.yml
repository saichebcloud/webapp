name: PACKER BUILD

on:
  push:
    branches: [main]

jobs:
  build:
    name: PACKER BUILD
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python with version 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up MariaDB
        run: |
          sudo apt-get update
          sudo apt-get install -y mariadb-server
          sudo service mariadb start

      - name: Connect to MariaDB
        run: |
          sudo mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{secrets.password}}'; CREATE DATABASE ${{secrets.name}};"

      - name: Create .env file
        run: |
          echo "DB_USER=${{secrets.user}}" >> .env
          echo "DB_PASSWORD=${{secrets.password}}" >> .env
          echo "DB_NAME=${{secrets.name}}" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=3306" >> .env

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"

      - name: Run tests to create, update and get user
        run: |
          python -m pytest -s tests

      - name: ZIP python code
        run: zip Archive.zip config.py main.py services.py util.py requirements.txt log_module.py tests/test_main.py

      - name: Packer init
        run: packer init .
        working-directory: ./packer

      - name: Build packer image
        run: packer build -var "archive_path=../Archive.zip" . | tee output.txt
        working-directory: ./packer

      - name: Extract Image Name
        run: cat output.txt | grep 'A disk image was created' | awk '{print $NF}' > image.txt
        working-directory: ./packer

      - name: Create a new instance template
        run: |
          gcloud config set project devp-414719
          output=$(gcloud compute instances list --format="table(name,zone)" | tail -n 1)
          instance_name=$(echo "$output" | awk '{print $1}')
          zone=$(echo "$output" | awk '{print $2}')
          image=$(cat image.txt)
          TEMPLATE_NAME="new-template-$(date +%s)"
          echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --source-instance=$instance_name \
            --source-instance-zone=$zone \
            --instance-template-region=us-west1 \
            --configure-disk=device-name=persistent-disk-0,instantiate-from=custom-image,custom-image=projects/devp-414719/global/images/$image
        working-directory: ./packer

      - name: Set instance template for instance group
        run: |
          INSTANCE_GROUP_MANAGER="webapp-instance-manager"
          REGION="us-west1"
          gcloud compute instance-groups managed set-instance-template $INSTANCE_GROUP_MANAGER \
            --template=projects/devp-414719/regions/us-west1/instanceTemplates/$TEMPLATE_NAME \
            --region=$REGION
        working-directory: ./packer

      - name: Rolling-action start update
        run: |
          INSTANCE_GROUP_MANAGER="webapp-instance-manager"
          REGION="us-west1"
          gcloud compute instance-groups managed rolling-action start-update $INSTANCE_GROUP_MANAGER \
          --version template=$TEMPLATE_NAME \
          --region=$REGION
        working-directory: ./packer

      - name: Check update status
        run: |
          INSTANCE_GROUP_MANAGER="webapp-instance-manager"
          REGION="us-west1"
          while true; do
            STATUS=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP_MANAGER \
                      --region=$REGION \
                      --format="value(status.isStable)")

            ERRORS=$(gcloud compute instance-groups managed list-errors $INSTANCE_GROUP_MANAGER \
                      --region=$REGION \
                      --format="value(error.errors[].message)")

            if [ "$STATUS" == "True" ]; then
              echo "Rolling update completed successfully."
              break
            elif [ -n "$ERRORS" ]; then
              echo "Errors detected during rolling update: $ERRORS"
              UPDATE_FAILED=true
              break
            else
              echo "Waiting for rolling update to complete..."
              sleep 30
            fi
          done

          if [ "$UPDATE_FAILED" = true ]; then
            echo "Rolling update failed. Exiting with error."
            exit 1
          fi
        working-directory: ./packer
